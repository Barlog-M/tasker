/*
 * This file is generated by jOOQ.
*/
package tasker.model.jooq.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import tasker.model.jooq.Indexes;
import tasker.model.jooq.Keys;
import tasker.model.jooq.Public;
import tasker.model.jooq.enums.BatchType;
import tasker.model.jooq.tables.records.BatchRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Batch extends TableImpl<BatchRecord> {

    private static final long serialVersionUID = 1046946530;

    /**
     * The reference instance of <code>public.batch</code>
     */
    public static final Batch BATCH = new Batch();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BatchRecord> getRecordType() {
        return BatchRecord.class;
    }

    /**
     * The column <code>public.batch.id</code>.
     */
    public final TableField<BatchRecord, UUID> ID = createField("id", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.batch.type</code>.
     */
    public final TableField<BatchRecord, BatchType> TYPE = createField("type", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(tasker.model.jooq.enums.BatchType.class), this, "");

    /**
     * The column <code>public.batch.remain</code>.
     */
    public final TableField<BatchRecord, Integer> REMAIN = createField("remain", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.batch.total</code>.
     */
    public final TableField<BatchRecord, Integer> TOTAL = createField("total", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.batch.created</code>.
     */
    public final TableField<BatchRecord, OffsetDateTime> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.batch.modified</code>.
     */
    public final TableField<BatchRecord, OffsetDateTime> MODIFIED = createField("modified", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * Create a <code>public.batch</code> table reference
     */
    public Batch() {
        this(DSL.name("batch"), null);
    }

    /**
     * Create an aliased <code>public.batch</code> table reference
     */
    public Batch(String alias) {
        this(DSL.name(alias), BATCH);
    }

    /**
     * Create an aliased <code>public.batch</code> table reference
     */
    public Batch(Name alias) {
        this(alias, BATCH);
    }

    private Batch(Name alias, Table<BatchRecord> aliased) {
        this(alias, aliased, null);
    }

    private Batch(Name alias, Table<BatchRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BATCH_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BatchRecord> getPrimaryKey() {
        return Keys.BATCH_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BatchRecord>> getKeys() {
        return Arrays.<UniqueKey<BatchRecord>>asList(Keys.BATCH_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Batch as(String alias) {
        return new Batch(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Batch as(Name alias) {
        return new Batch(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Batch rename(String name) {
        return new Batch(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Batch rename(Name name) {
        return new Batch(name, null);
    }
}
