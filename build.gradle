buildscript {
	ext {
		kotlinVer = '1.1.51'
		springBootVer = '1.5.8.RELEASE'
		kotlinLoggingVer = '1.4.6'
		postgresqlVer = '42.1.4'
		flywayVer = '4.2.0'

		testContainersVer = '1.4.3'

		jooqPluginVer = '2.0.7'
		propdepsPluginVer = '0.0.10.RELEASE'
		versionPluginVer = '0.17.0'
		dockerPluginVer = '0.13.0'
		dockerComposePluginVer = '0.5.9'
	}

	repositories {
		jcenter()
		maven { url 'https://plugins.gradle.org/m2/' }
		maven { url 'http://repo.spring.io/plugins-release' }
	}

	dependencies {
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVer"
		classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVer"
		classpath "io.spring.gradle:propdeps-plugin:$propdepsPluginVer"
		classpath "nu.studer:gradle-jooq-plugin:$jooqPluginVer"
		classpath "gradle.plugin.com.boxfuse.client:flyway-release:$flywayVer"
		// gradle dependencyUpdates -Drevision=release
		classpath "com.github.ben-manes:gradle-versions-plugin:$versionPluginVer"
		classpath "gradle.plugin.com.palantir.gradle.docker:gradle-docker:$dockerPluginVer"
	}
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'idea'
apply plugin: 'kotlin'
apply plugin: 'kotlin-kapt'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'propdeps'
apply plugin: 'propdeps-idea'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'com.palantir.docker'
apply plugin: 'org.flywaydb.flyway'
apply plugin: 'nu.studer.jooq'

group = 'li.barlog.template.kotlin'
version = '0.1-SNAPSHOT'

mainClassName = 'tasker.AppKt'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

tasks.withType(JavaCompile) {
	options.fork = true
	options.incremental = true
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
	kotlinOptions {
		jvmTarget = "1.8"
	}
}

sourceSets {
	main.java.srcDirs += [file("$buildDir/generated/source/kapt/main")]
}

repositories {
	jcenter()
}

ext {
	springAmqpVer = dependencyManagement.importedProperties['spring-amqp.version']
}

configurations {
	all*.exclude module: 'tomcat-jdbc'
}

dependencies {
	compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVer"
	//compile "org.jetbrains.kotlin:kotlin-reflect:$kotlinVer"

	compile "io.github.microutils:kotlin-logging:$kotlinLoggingVer"

	compile 'com.fasterxml.jackson.module:jackson-module-kotlin'
	compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

	compile 'org.springframework.boot:spring-boot-starter'
	compile 'org.springframework.boot:spring-boot-starter-amqp'

	compile 'org.springframework.boot:spring-boot-starter-jooq'
	compile "org.postgresql:postgresql:$postgresqlVer"
	jooqRuntime "org.postgresql:postgresql:$postgresqlVer"

	compile "org.flywaydb:flyway-core:$flywayVer"

	compile 'com.zaxxer:HikariCP'

	testCompile 'org.springframework.boot:spring-boot-starter-test'
	testCompile "org.springframework.amqp:spring-rabbit-test:$springAmqpVer"

	testCompile "org.testcontainers:testcontainers:$testContainersVer"
	testCompile "org.testcontainers:postgresql:$testContainersVer"

	kapt 'org.springframework.boot:spring-boot-configuration-processor'
	optional 'org.springframework.boot:spring-boot-configuration-processor'
}

jar {
	archiveName 'tasker.jar'
}

tasks.withType(Test) {
	maxParallelForks = Runtime.runtime.availableProcessors()
}

// gradle flywayMigrate
// gradle flywayClean
// gradle flywayInfo
// gradle flywayValidate

flyway {
	url = 'jdbc:postgresql://localhost:5432/postgres'
	user = 'postgres'
	password = 'password'
}

// gradle generateDbJooqSchemaSource --rerun-tasks
jooq {
	db(sourceSets.main) {
		jdbc {
			driver = 'org.postgresql.Driver'
			url = 'jdbc:postgresql://localhost:5432/postgres'
			user = 'postgres'
			password = 'password'
		}
		generator {
			database {
				name = 'org.jooq.util.postgres.PostgresDatabase'
				inputSchema = 'public'
				includes = '.*'
			}
			generate {
				relations = true
				deprecated = false
				records = true
				immutablePojos = true
				fluentSetters = true
				javaTimeTypes = true
			}
			target {
				packageName = 'tasker.model.jooq'
				directory = 'src/main/java'
			}
		}
	}
}
cleanGenerateDbJooqSchemaSource.enabled = false
generateDbJooqSchemaSource.enabled = false

task wrapper(type: Wrapper) {
	gradleVersion = '4.3'
	distributionType = Wrapper.DistributionType.ALL
}

bootRepackage.mustRunAfter clean

// https://github.com/palantir/gradle-docker
// gradle docker
docker {
	dependsOn jar, bootRepackage
	name 'tasker'
	tags 'latest'
	files jar.outputs
	dockerfile file('src/main/docker/Dockerfile')
	buildArgs([
		JAVA_OPTS: '-XX:-TieredCompilation -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap',
		PORT     : '8081'
	])
	pull true
}

task stage(dependsOn: ['build', 'clean'])
